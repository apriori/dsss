DSSS is a tool to:

* Build D software.
* Install D software.
* Configure D software dependencies and libraries.
* Maintain a repository of DSSS-compatible D sources to be easily installable
  via the Internet.

To the average software engineer, the most important part is dsss.conf, the
file added to your source code to configure how DSSS will compile it.

dsss.conf is a plain-text file, with a similar syntax to Windows INI files. It
can have any number of sections, each of which is headed with the name in
brackets, like so:
[foo/bar.d]

Each section is named by a source file or directory. In general, sections named
for source files will generate binaries, and sections named for directories
will generate libraries, which are set up through DSSS to be equivalent to D
packages.

In each section, there can be any number of settings. Each setting is a
keyword, possibly followed by = or += and a value. For example, the "target"
setting sets the name of the output binary or library in a given section:
target=foobar
(In general, the target setting will be automatically set to something
sensible)

Furthermore, any amount of content in dsss.conf can be set up as version-
specific, with a version keyword similar to the version keyword in D. For
example, to make sure that a certain binary is only produced on Windows:
version (Windows) {
 [foo/windows.d]
 target=foo_for_windows
}

The version statement in dsss.conf has a fairly strict syntax: the { must be on
the same line as the statement, and the version being tested must be in
parenthesis. Unlike D, DSSS' version statement supports the ! (not) operator:
version (!Windows) {
 [foo/nowindows.d]
 target=foo_for_notwindows
}

The version statement also supports an 'else' clause:
version (Windows) {
 [foo/windows.d]
 target=foo_for_windows
} else {
 [foo/notwindows.d]
 target=foo_for_notwindows
}

There are quite a few other settings supported:

* exclude
  * exclude a list of .d files from being included in a library:
    exclude=foo.d bar.d
* {pre,post}{build,install,clean}
  * commands to be run before/after building/installing/cleaning. Can be any
    number of ;-separated commands, and supports some special command types:
    * .d files. If a .d file is specified as a command, it will be compiled and
      run.
    * install: DSSS has an internal 'install' command, which takes the
      following syntax:
      * install <file> <target directory>
* buildflags
  * Flags that will be added to the output to build/bud when building this
    section.
