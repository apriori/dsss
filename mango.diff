Index: mango/db/memcache/MemCache.d
===================================================================
--- mango/db/memcache/MemCache.d	(revision 928)
+++ mango/db/memcache/MemCache.d	(working copy)
@@ -39,7 +39,7 @@
 
 module mango.db.memcache.MemCache;
 
-private import  std.Thread;
+private import  std.thread;
 
 private import  mango.io.Socket,
                 mango.io.Buffer,
Index: mango/locks/CyclicBarrier.d
===================================================================
--- mango/locks/CyclicBarrier.d	(revision 928)
+++ mango/locks/CyclicBarrier.d	(working copy)
@@ -14,6 +14,8 @@
 
 module mango.locks.CyclicBarrier;
 
+private import mango.locks.Condition;
+
 class Error : Object
 {
         private char[] msg;
Index: mango/locks/Exchanger.d
===================================================================
--- mango/locks/Exchanger.d	(revision 928)
+++ mango/locks/Exchanger.d	(working copy)
@@ -16,11 +16,13 @@
   import mango.locks.Utils;
   import mango.locks.TimeUnit;
   import mango.locks.Exceptions;
-  import mango.locks.ReentrantLock;
+  import mango.locks.ReentrantLock;
 
   // for unittest
   import std.thread;
   import mango.locks.Countdown;
+  
+  import mango.locks.Condition;
 }
 
 /** \class Exchanger
Index: mango/locks/ReentrantLock.d
===================================================================
--- mango/locks/ReentrantLock.d	(revision 928)
+++ mango/locks/ReentrantLock.d	(working copy)
@@ -25,6 +25,9 @@
   import mango.locks.Utils;
   import mango.locks.LockImpl;
   import mango.locks.Exceptions;
+  
+  import mango.locks.TimeUnit;
+  import mango.locks.Condition;
 }
 
 /** \class ReentrantLock
Index: mango/sys/Epoch.d
===================================================================
--- mango/sys/Epoch.d	(revision 928)
+++ mango/sys/Epoch.d	(working copy)
@@ -49,6 +49,7 @@
 
 version (Posix)
 {
+        import std.c.time : timezone;
         extern (C) int mktime (tm *);
         extern (C) tm *gmtime (int *);
 }
Index: mango/sys/Atomic.d
===================================================================
--- mango/sys/Atomic.d	(revision 928)
+++ mango/sys/Atomic.d	(working copy)
@@ -32,7 +32,14 @@
   return compareAndSet32(vptr,cast(int)expect,cast(int)update);
 }
 
+// this ASM code doesn't work on GDC
 version (X86) {
+    version (GNU) {} else {
+        version = X86_not_GNU;
+    }
+}
+
+version (X86_not_GNU) {
   // alternative declaration for data instead of pointers
   static bool compareAndSet32(void* vptr, int expect, int update) {
     asm {
